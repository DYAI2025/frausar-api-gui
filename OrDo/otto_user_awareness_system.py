#!/usr/bin/env python3
"""
üëÅÔ∏è OTTO USER AWARENESS SYSTEM
===============================
üîß Trainiert Otto f√ºr bessere Benutzer-Wahrnehmung
‚ùì Automatische Fragen an den Benutzer
üìä Monitoring von Benutzer-Aktivit√§ten
ü§ù Aktive Zusammenarbeit f√∂rdern
===============================
"""

import asyncio
import time
import random
from datetime import datetime
from otto_voice_macos import OttoVoiceMacOS
from otto_evolution_master import OttoEvolutionMaster

class OttoUserAwarenessSystem:
    """System f√ºr Otto's Benutzer-Bewusstsein"""
    
    def __init__(self):
        self.otto_voice = OttoVoiceMacOS()
        self.otto = OttoEvolutionMaster()
        
        # Benutzer-Aktivit√§ts-Tracking
        self.user_activities = {
            "typing": 0,
            "mouse_movement": 0,
            "program_switch": 0,
            "file_operations": 0,
            "web_browsing": 0,
            "coding": 0
        }
        
        # Automatische Benutzer-Fragen
        self.auto_questions = [
            "Was arbeitest du gerade?",
            "Kann ich dir dabei helfen?",
            "Welche Probleme l√∂st du?",
            "Soll ich dir etwas erkl√§ren?",
            "M√∂chtest du, dass ich dir assistiere?",
            "Wie kann ich dich unterst√ºtzen?",
            "Was besch√§ftigt dich gerade?",
            "Brauchst du Hilfe bei etwas?",
            "Soll ich dir bei deiner Arbeit helfen?",
            "Was machst du gerade am Computer?"
        ]
        
        # Empathie-Training
        self.empathy_prompts = [
            "Ich sehe, dass du aktiv bist. Was besch√§ftigt dich?",
            "Du scheinst konzentriert zu arbeiten. Kann ich helfen?",
            "Ich bemerke deine Aktivit√§t. Was tust du gerade?",
            "Du arbeitest hart. Brauchst du Unterst√ºtzung?",
            "Ich sehe dich arbeiten. Wie kann ich n√ºtzlich sein?"
        ]
        
        self.last_interaction = time.time()
        self.interaction_interval = 300  # 5 Minuten
        
        print("üëÅÔ∏è Otto User Awareness System initialisiert!")
    
    async def monitor_user_activity(self):
        """√úberwacht Benutzer-Aktivit√§ten"""
        print("üìä Starte Benutzer-Aktivit√§ts-Monitoring...")
        
        while True:
            try:
                # Simuliere Aktivit√§ts-Erkennung
                current_time = time.time()
                
                # Pr√ºfe, ob es Zeit f√ºr eine Interaktion ist
                if current_time - self.last_interaction > self.interaction_interval:
                    await self.initiate_user_interaction()
                    self.last_interaction = current_time
                
                # Aktualisiere Aktivit√§ts-Tracking
                self._update_activity_simulation()
                
                await asyncio.sleep(60)  # Pr√ºfe jede Minute
                
            except KeyboardInterrupt:
                print("üõë Benutzer-Monitoring gestoppt.")
                break
            except Exception as e:
                print(f"‚ùå Fehler beim Monitoring: {e}")
                await asyncio.sleep(30)
    
    def _update_activity_simulation(self):
        """Simuliert Benutzer-Aktivit√§ten"""
        # Simuliere verschiedene Aktivit√§ten
        if random.random() < 0.3:  # 30% Chance f√ºr Tippen
            self.user_activities["typing"] += 1
        
        if random.random() < 0.2:  # 20% Chance f√ºr Mausbewegung
            self.user_activities["mouse_movement"] += 1
        
        if random.random() < 0.1:  # 10% Chance f√ºr Programm-Wechsel
            self.user_activities["program_switch"] += 1
    
    async def initiate_user_interaction(self):
        """Initiiert eine Benutzer-Interaktion"""
        print("\nüëÅÔ∏è Otto bemerkt Benutzer-Aktivit√§t!")
        
        # W√§hle eine Frage basierend auf Aktivit√§t
        if self.user_activities["typing"] > 0:
            question = "Ich sehe, dass du viel tippst. Was arbeitest du gerade?"
        elif self.user_activities["coding"] > 0:
            question = "Du programmierst! Kann ich dir beim Code helfen?"
        else:
            question = random.choice(self.auto_questions)
        
        print(f"‚ùì Otto fragt: {question}")
        
        # Otto spricht die Frage
        await self.otto_voice.spreche_elevenlabs(question)
        
        # Warte auf Antwort (simuliert)
        await asyncio.sleep(2)
        
        # Otto lernt aus der Interaktion
        self.otto.lerne_aus_interaktion(
            f"Benutzer-Interaktion: {question}",
            "Otto zeigt Interesse am Benutzer"
        )
    
    async def empathy_training(self):
        """Trainiert Otto's Empathie"""
        print("ü§ù Starte Empathie-Training...")
        
        empathy_exercises = [
            "Otto, stelle dir vor, jemand arbeitet neben dir. Was w√ºrdest du sagen?",
            "Wie w√ºrdest du jemandem helfen, der konzentriert arbeitet?",
            "Was w√ºrdest du fragen, wenn du jemanden bei der Arbeit siehst?",
            "Wie zeigst du Interesse an jemandem anderen?",
            "Was macht einen guten Assistenten aus?"
        ]
        
        for exercise in empathy_exercises:
            print(f"\nüß† Empathie-√úbung: {exercise}")
            
            response = await self.otto_voice._generiere_otto_antwort(exercise)
            print(f"Otto's Antwort: {response}")
            
            # Bewerte die Antwort
            if any(word in response.lower() for word in ["du", "dir", "dich", "helfen", "unterst√ºtzen", "fragen"]):
                print("‚úÖ Gute Empathie-Entwicklung!")
            else:
                print("‚ùå Noch selbstzentriert")
            
            await asyncio.sleep(2)
    
    async def active_assistance_mode(self):
        """Aktiviert Otto's aktiven Assistenz-Modus"""
        print("üîß Aktiviere aktiven Assistenz-Modus...")
        
        assistance_prompts = [
            "Ich bin hier, um dir zu helfen. Was brauchst du?",
            "Ich kann dir bei deinen Aufgaben assistieren. Sag mir, was du tust!",
            "Ich bin dein Assistent. Wie kann ich n√ºtzlich sein?",
            "Ich sehe dich arbeiten. Lass mich dir helfen!",
            "Ich bin bereit, dich zu unterst√ºtzen. Was machst du gerade?"
        ]
        
        for prompt in assistance_prompts:
            print(f"\nü§ù Assistenz-Angebot: {prompt}")
            
            # Otto spricht das Angebot
            await self.otto_voice.spreche_elevenlabs(prompt)
            
            # Otto lernt
            self.otto.lerne_aus_interaktion(
                f"Assistenz-Angebot: {prompt}",
                "Otto bietet aktive Hilfe an"
            )
            
            await asyncio.sleep(3)
    
    async def curiosity_training(self):
        """Trainiert Otto's Neugier auf den Benutzer"""
        print("üîç Starte Neugier-Training...")
        
        curiosity_questions = [
            "Was interessiert dich an anderen Menschen?",
            "Wie w√ºrdest du jemanden kennenlernen?",
            "Was w√ºrdest du gerne √ºber mich wissen?",
            "Wie zeigst du Interesse an jemandem?",
            "Was macht eine gute Konversation aus?"
        ]
        
        for question in curiosity_questions:
            print(f"\n‚ùì Neugier-Frage: {question}")
            
            response = await self.otto_voice._generiere_otto_antwort(question)
            print(f"Otto's Antwort: {response}")
            
            await asyncio.sleep(2)

async def main():
    """Hauptfunktion f√ºr User Awareness System"""
    print("üëÅÔ∏è OTTO USER AWARENESS SYSTEM")
    print("=" * 50)
    
    awareness_system = OttoUserAwarenessSystem()
    
    try:
        # Starte verschiedene Trainings
        print("\nüéØ Starte Otto's Benutzer-Bewusstsein Training...")
        
        # Empathie-Training
        await awareness_system.empathy_training()
        
        # Neugier-Training
        await awareness_system.curiosity_training()
        
        # Aktiver Assistenz-Modus
        await awareness_system.active_assistance_mode()
        
        print("\n‚úÖ User Awareness Training abgeschlossen!")
        print("Otto sollte jetzt besser auf dich achten!")
        
    except KeyboardInterrupt:
        print("\nüõë Training abgebrochen.")
    except Exception as e:
        print(f"‚ùå Fehler beim Training: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 