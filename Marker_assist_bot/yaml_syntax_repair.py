#!/usr/bin/env python3
"""
YAML Syntax Repair Tool
Repariert spezifische YAML-Syntaxfehler in Marker-Dateien
"""

import yaml
import os
import json
from datetime import datetime

def repair_stellvertreterkonflikt_marker():
    """Repariert die spezifischen Probleme in M_STELLVERTRETERKONFLIKT_MARKER.yaml"""
    
    file_path = "../ALL_SEMANTIC_MARKER_TXT/ALL_NEWMARKER01/M_STELLVERTRETERKONFLIKT_MARKER.yaml"
    
    print("üîß Repariere M_STELLVERTRETERKONFLIKT_MARKER.yaml...")
    
    # Backup erstellen
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Backup erstellt: {backup_path}")
        
        # Korrekte Struktur aufbauen
        marker_data = {
            "id": "M_STELLVERTRETERKONFLIKT",
            "name": "Stellvertreterkonflikt",
            "level": 2,
            "category": "dynamics",
            "cluster": ["conflict_avoidance", "hidden_motivation"],
            "meta_marker": ["MM_INDIREKTER_KONFLIKT"],
            "status": "review",
            "author": "ben_2025",
            "created_at": "2025-07-14",
            "lang": "de",
            "description": """Marker f√ºr indirekte, verschobene Konfliktf√ºhrung: Die eigentliche emotionale Motivation (z.B. Eifersucht, Neid, Angst, Verletztheit) bleibt unausgesprochen. Die Diskussion wird auf ein Nebenthema verlagert (Prinzipien, Sicherheit, Ordnung, Budget, Kompetenz), um ohne Offenlegung eigener Verletzlichkeit Kontrolle, Vorteil oder moralische √úberlegenheit zu beanspruchen.""",
            "pattern": [
                "Pl√∂tzliche Sorge um rationale, organisatorische oder moralische Details, w√§hrend im Hintergrund ein anderes Gef√ºhl steht.",
                "Diskussionen, die auf der Sachebene bleiben, obwohl der wahre Grund emotional ist.",
                "Begr√ºndungen, die moralisch, vern√ºnftig oder f√ºrsorglich klingen, aber dem Anderen das Handeln erschweren oder Schuld zuweisen.",
                "Scheinbar selbstlose Bedenken, die faktisch Kontrolle, √úberlegenheit oder Vorteil sichern."
            ],
            "rules": [
                {
                    "type": "negation",
                    "description": "Keine direkte Benennung der eigentlichen Emotion (Eifersucht, Angst, Neid, Unsicherheit)."
                },
                {
                    "type": "co_occurrence",
                    "condition": "emotionale Spannung, die sich im Verhalten/Timing zeigt"
                },
                {
                    "type": "role_inversion",
                    "description": "Vorteil, Kontrolle oder √úberlegenheit werden durch den Vorwand beansprucht."
                }
            ],
            "tags": ["konflikt", "indirekt", "stellvertreter", "beziehung", "hidden_agenda"],
            "semantic_grabber_id": "AUTO_SEM_20250714_6E57",
            "scoring": {
                "weight": 1.3,
                "impact": "mid"
            },
            "examples": [
                {
                    "title": "Finanzen als Vorwand",
                    "text": "B m√∂chte verreisen. A: \"Schatz, hast du gesehen, wie viel wir diesen Monat schon ausgegeben haben? Deine Reise‚Ä¶ ich wei√ü nicht, ob das so klug ist.\"",
                    "hidden_motivation": "Eifersucht auf Zeit ohne A"
                },
                {
                    "title": "Kompetenz in Frage gestellt",
                    "text": "Team-Meeting, Kollege A zu B: \"Bevor wir uns sp√§ter √Ñrger einhandeln: Hast du alle Zahlen gepr√ºft? Letztes Mal gab's da eine L√ºcke. Ich kann da nachher dr√ºber schauen.\"",
                    "hidden_motivation": "Neid, Angst vor Statusverlust"
                },
                {
                    "title": "Unordnung als Streitpunkt",
                    "text": "A f√ºhlt sich vernachl√§ssigt, B besch√§ftigt sich mit neuem Hobby. \"So ein Chaos √ºberall ‚Äì ich kann hier gar nicht mehr entspannen. Musst du immer alles liegen lassen?\"",
                    "hidden_motivation": "Verletztheit, Wunsch nach mehr Aufmerksamkeit"
                },
                {
                    "title": "Prinzipien als Totschlagargument",
                    "text": "B schl√§gt vor, Freunde zu besuchen. A: \"Nein, zu denen geh ich nicht. Ich bin strikt gegen Rauchen in geschlossenen R√§umen, das wei√üt du. Da bin ich konsequent.\"",
                    "hidden_motivation": "Vermeidung einer Person aus Eifersucht/Misstrauen"
                },
                {
                    "title": "Sicherheit als Begr√ºndung",
                    "text": "B will ein sportliches Fahrrad kaufen. A: \"Hast du mal die Unfallzahlen gesehen? Ich find das echt gef√§hrlich. Ein normales Bike w√§r sicherer.\"",
                    "hidden_motivation": "Neid, Angst vor weniger Einfluss"
                },
                {
                    "title": "Wohlergehen vorschieben",
                    "text": "B m√∂chte abends ausgehen. A: \"Ich glaub ehrlich, du solltest mal mehr auf deinen Schlaf achten ‚Äì dauernd unterwegs ist doch nicht gesund.\"",
                    "hidden_motivation": "Angst, den Partner zu verlieren; Wunsch nach Kontrolle"
                },
                {
                    "title": "Zeitmanagement/Selbstf√ºrsorge als Vorwand",
                    "text": "Kollegin B schl√§gt gemeinsames Projekt vor. A: \"Ich habe gelernt, Grenzen zu setzen und muss gerade an mein eigenes Wohl denken. Vielleicht passt das einfach nicht mehr zu meiner Work-Life-Balance.\"",
                    "hidden_motivation": "Missgunst, Angst vor √úberfl√ºgeltwerden"
                },
                {
                    "title": "\"F√ºrsorglicher\" Kontaktabbruch",
                    "text": "Nach Streit, A zu B: \"Ich glaube, es ist besser, wenn wir uns eine Weile nicht sehen. Du brauchst Raum, und ich will dich da nicht einengen.\"",
                    "hidden_motivation": "Selbstschutz, aber auch Strafe/Kontrolle durch R√ºckzug"
                }
            ],
            "metadata": {
                "created_at": "2025-07-14T00:42:25.155399",
                "created_by": "FRAUSAR_GUI_v2",
                "version": "1.0",
                "tags": ["neu_erstellt", "needs_review"],
                "repaired_at": datetime.now().isoformat(),
                "repaired_by": "yaml_syntax_repair_tool"
            }
        }
        
        # Als YAML speichern
        with open(file_path, 'w', encoding='utf-8') as f:
            yaml.dump(marker_data, f, default_flow_style=False, allow_unicode=True, sort_keys=False, indent=2)
        
        print("‚úÖ YAML-Datei erfolgreich repariert!")
        
        # Validierung
        with open(file_path, 'r', encoding='utf-8') as f:
            validated_data = yaml.safe_load(f)
        
        print("‚úÖ YAML-Syntax validiert - keine Fehler!")
        print(f"üìä Marker ID: {validated_data['id']}")
        print(f"üìä Anzahl Beispiele: {len(validated_data['examples'])}")
        print(f"üìä Semantic Grabber ID: {validated_data['semantic_grabber_id']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler bei der Reparatur: {e}")
        return False

def test_yaml_to_json_conversion():
    """Testet die YAML zu JSON Konvertierung nach der Reparatur"""
    
    file_path = "../ALL_SEMANTIC_MARKER_TXT/ALL_NEWMARKER01/M_STELLVERTRETERKONFLIKT_MARKER.yaml"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            yaml_data = yaml.safe_load(f)
        
        json_output = json.dumps(yaml_data, indent=2, ensure_ascii=False)
        
        print("üß™ YAML zu JSON Konvertierung erfolgreich!")
        print(f"üìè JSON Gr√∂√üe: {len(json_output)} Zeichen")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler bei YAML zu JSON Konvertierung: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ YAML Syntax Repair Tool")
    print("=" * 50)
    
    # Reparatur durchf√ºhren
    if repair_stellvertreterkonflikt_marker():
        print("\n" + "=" * 50)
        print("üß™ Teste YAML zu JSON Konvertierung...")
        test_yaml_to_json_conversion()
    else:
        print("‚ùå Reparatur fehlgeschlagen!") 